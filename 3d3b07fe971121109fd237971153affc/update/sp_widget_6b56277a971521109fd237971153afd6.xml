<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($scope, $window, spUtil) {
	/* widget controller */
	var c = this;

	c.title = 'Incident Report';
	c.incident_label_fields = [];
	c.incidents = [];
	c.attachment_sys_id = '';
	c.issue_date = '';
	c.issue_hour = '';
	c.instance_name = c.data.instance_name;
	c.logo_url = '';
	c.loading = false;

	get_date_hour_issue();
	
	c.incident_label_fields = c.data.incident_label_fields;
	c.incidents = JSON.parse(c.data.incidents);
	
	c.logo_url = 'https://' + c.instance_name + '.service-now.com/logo_sn.png';
	
	function get_date_hour_issue() {
		c.issue_date = moment().format("DD/MM/YYYY");
		c.issue_hour = moment().format("HH:mm:ss");
	}

	// Reference: https://developer.servicenow.com/dev.do#!/reference/api/washingtondc/server/sn_pdfgeneratorutils-namespace/PDFGenerationAPIBothAPI
	// Reference: https://www.servicenow.com/community/brazil-snug/building-a-pdf-report-using-pdfgenerationapi/ta-p/2436540
	c.generate_pdf_script_include = function() {
		
		var attachment_url = '';
		var error_message = '';

		var obj = {
			action: 'generate_pdf',
		};

		c.server.get(obj).then(function(response) {
			
			c.data.action = undefined;

			if (response.data.attachment_url && response.data.attachment_url !== '') {
				
				attachment_url = response.data.attachment_url;
				
				$window.open(attachment_url, '_self');
				
			} else {
				
				error_message = response.data.error_message;
				
				alert(error_message);
			}
		});
	};
	
	// Reference: https://www.servicenow.com/community/brazil-snug/building-an-script-include-to-generate-file-in-csv-format/ta-p/2532414
	// Use GlideSysAttachment
	c.generate_csv_script_include = function() {

		var attachment_url = '';
		var error_message = '';

		var obj = {
			action: 'generate_csv',
		};

		c.server.get(obj).then(function(response) {
			
			c.data.action = undefined;

			if (response.data.attachment_url && response.data.attachment_url !== '') {
				
				attachment_url = response.data.attachment_url;
				
				$window.open(attachment_url, '_self');
				
			} else {
				
				error_message = response.data.error_message;
				
				alert(error_message);
			}
		});
	};

	// Reference: https://developer.mozilla.org/pt-BR/docs/Web/API/Window/print
	//
	// Reference:	Em vez de obter um table na página, pode-se criar com JS uma estrutra de HTML para imprimir em PDF
	// 				https://gist.github.com/sam-ngu/ee10b650112f891013271b8d7ca3e6f3
	//
	// Observation: Não há suporte para @page e page number no momento - https://stackoverflow.com/a/17752489
    c.generate_pdf_vanilla_javascript = function() {

		print();
    };

	// Reference: https://www.codexworld.com/export-html-table-data-to-excel-using-javascript/
	// Reference: https://stackoverflow.com/a/37516332/10407880 - Não é possível gerar .xlsx com Vanilla JS, mas somente com o auxílio de uma biblioteca JS
	// Observation: Para que os estilos como cores apareçam no Excel é necessário usar o CSS style inline
	c.generate_excel_vanilla_javascript = function() {

		var filename = '';
		var table = '';
		var table_id = null;
		var table_string = '';
		var blob_data = null;
		var url = null;
		var link = '';
		var data_type_excel = 'application/vnd.ms-excel';
		
		filename = 'incidents_vanilla_javascript';
		table_id = document.getElementById("table-data-report");		
		table_string = '<table style="background-color: none; font-size: 14pt"><thead><tr><th>Nome</th></tr></thead><tbody><tr><td>Léandro</td></tr><tr><td>Kêrly</td></tr><tr><td>Lavínia</td></tr><tr><td>Lisbellá</td></tr></tbody></table>';
		table = table_id ? table_id.outerHTML : table_string; // Ou tabela na página ou tabela formada como string
				         
    	blob_data = new Blob(['\ufeff' + table], { type: data_type_excel }); // Esse "\ufeff" é importante para manter os acentos
    	url = URL.createObjectURL(blob_data);

		link = document.createElement('a');		
		link.setAttribute('href', url);		
		link.setAttribute('download', filename);
		link.style.display = 'none';

		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);
	};
	
	// Reference: https://medium.com/@idorenyinudoh10/how-to-export-data-from-javascript-to-a-csv-file-955bdfc394a9
	c.generate_csv_vanilla_javascript = function() {
		
		var refined_data = [];
		var incident_label_fields = [];
		var incidents = [];
		var csv_content = '';
		var blob = null;
		var obj_url = null;
		var link = '';
		var file_name = '';
		
		file_name = 'incidents_vanilla_javascript';
		incident_label_fields = c.incident_label_fields;
		incidents = c.incidents;
		
		incidents.forEach(function(item) {
			refined_data.push(Object.values(item));
		});
		
		// Header Row
		csv_content += incident_label_fields.join(';') + '\n';
		
		// Registers Rows
		refined_data.forEach(function(row) {
			
			row.pop(); // Remove o último elemento do array, que não é necessário. Exemplo do elemento: 'object:328'
			
			csv_content += row.join(';') + '\n';
		});

		blob = new Blob([csv_content], { type: 'text/csv;charset=utf-8,' });
		obj_url = URL.createObjectURL(blob);

		link = document.createElement('a');
		link.setAttribute('href', obj_url);
		link.setAttribute('download', file_name);
		link.style.display = 'none';

		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);
	};
	
	// Reference: https://docs.servicenow.com/bundle/vancouver-integrate-applications/page/administer/exporting-data/task/t_ExportDirectlyFromTheURL.html
	c.generate_pdf_url = function() {
		
		var url;
		var instance_name;

		instance_name = c.instance_name;

		url = 'https://' + instance_name + '.service-now.com/incident_list.do?PDF&sysparm_orderby=number';

		$window.open(url, '_self');
	};
	
	// Reference: https://docs.servicenow.com/bundle/vancouver-integrate-applications/page/administer/exporting-data/task/t_ExportDirectlyFromTheURL.html
	c.generate_excel_url = function() {
		
		var url = '';
		var instance_name = '';
		var excel_extension = '';

		instance_name = c.instance_name;
		excel_extension = 'XLSX'; //EXCEL OR XLS = .xls / XLSX = .xlsx

		url = 'https://' + instance_name + '.service-now.com/incident_list.do?' + excel_extension + '&sysparm_orderby=number';

		$window.open(url, '_self');
	};
	
	// Reference: https://docs.servicenow.com/bundle/vancouver-integrate-applications/page/administer/exporting-data/task/t_ExportDirectlyFromTheURL.html
	c.generate_csv_url = function() {

		var url = '';
		var instance_name = '';

		instance_name = c.instance_name;

		url = 'https://' + instance_name + '.service-now.com/incident_list.do?CSV&sysparm_orderby=number';

		$window.open(url, '_self');
		
	};

	// Reference: https://docs.sheetjs.com/docs/
	c.generate_excel_sheetjs = function() {
		
		var worksheet;
		var workbook;
		var filename;
		var incident_label_fields;
		var incidents;
		var incidents_values;
		var refined_data;
		
		filename = 'incidents_sheetjs.xlsx';
		incidents_values = [];
		refined_data = [];
		
		incident_label_fields = c.incident_label_fields;
		incidents = c.incidents;
		
		refined_data.push(incident_label_fields);
		
		incidents.forEach(function(item) {
			incidents_values.push(Object.values(item));
		});
		
		incidents_values.forEach(function(row) {
			row.pop(); // Remove o último elemento do array, que não é necessário. Exemplo do elemento: 'object:328'

			refined_data.push(row);
		});		
		
		worksheet = XLSX.utils.aoa_to_sheet(refined_data);
		workbook = XLSX.utils.book_new();
    	XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
		XLSX.writeFile(workbook, filename);
	}
	
	c.generate_excel_exceljs_user_data = function() {
		
		var worksheet;
		var workbook;
		var filename;
		var user_data;
		
		filename = 'user_data.xlsx';
		
		user_data = [["User ID", "Last name", "Business phone"],
								["joao.silva", "Silva", "01112345678"],
    ["maria.oliveira", "Oliveira", "02187654321"],
    ["ana.souza", "Souza", "03111223344"],
    ["carlos.pereira", "Pereira", "04155667788"],
    ["lucas.almeida", "Almeida", "05199887766"],
    ["juliana.fernandes", "Fernandes", "06133445566"],
    ["fernando.costa", "Costa", "07122334455"],
    ["patricia.rodrigues", "Rodrigues", "08166778899"],
    ["roberto.martins", "Martins", "09144556677"],
    ["claudia.santos", "Santos", "01177889900"],
    ["ricardo.lima", "Lima", "02155667788"],
    ["mariana.gomes", "Gomes", "03199887766"],
    ["antonio.barros", "Barros", "04133445566"],
    ["renata.alves", "Alves", "05122334455"],
    ["eduardo.silveira", "Silveira", "06166778899"],
    ["camila.mendes", "Mendes", "07144556677"],
    ["fabio.ramos", "Ramos", "08177889900"],
    ["isabela.ferreira", "Ferreira", "09155667788"],
    ["gustavo.souza", "Souza", "01199887766"],
    ["leticia.rocha", "Rocha", "02133445566"],
    ["marcos.cavalcante", "Cavalcante", "03122334455"],
    ["ana.paula", "Paula", "04166778899"],
    ["pedro.santos", "Santos", "05144556677"],
    ["carla.martins", "Martins", "06177889900"],
    ["rafael.almeida", "Almeida", "07155667788"],
    ["beatriz.silva", "Silva", "08199887766"],
    ["joana.oliveira", "Oliveira", "09133445566"],
    ["rodrigo.souza", "Souza", "01122334455"],
    ["luciana.pereira", "Pereira", "02166778899"],
    ["felipe.rodrigues", "Rodrigues", "03144556677"],
    ["daniela.fernandes", "Fernandes", "04177889900"],
    ["vinicius.costa", "Costa", "05155667788"],
    ["aline.martins", "Martins", "06199887766"],
    ["bruno.santos", "Santos", "07133445566"],
    ["carolina.lima", "Lima", "08122334455"],
    ["diego.gomes", "Gomes", "09166778899"],
    ["fernanda.alves", "Alves", "01144556677"],
    ["gabriel.silveira", "Silveira", "02177889900"],
    ["helena.mendes", "Mendes", "03155667788"],
    ["igor.ramos", "Ramos", "04199887766"],
    ["julia.ferreira", "Ferreira", "05133445566"],
    ["kaio.souza", "Souza", "06122334455"],
    ["larissa.rocha", "Rocha", "07166778899"],
    ["marcelo.cavalcante", "Cavalcante", "08144556677"],
    ["natalia.paula", "Paula", "09177889900"],
    ["otavio.santos", "Santos", "01155667788"],
    ["priscila.martins", "Martins", "02199887766"],
    ["quiteria.almeida", "Almeida", "03133445566"],
    ["renato.silva", "Silva", "04122334455"]];	
		
		worksheet = XLSX.utils.aoa_to_sheet(user_data);
		workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");
		XLSX.writeFile(workbook, filename);
	}

	// Reference: https://www.npmjs.com/package/exceljs
	// https://www.servicenow.com/community/developer-articles/custom-excel-export-or-import-in-client-side-using-exceljs/ta-p/2519012
	c.generate_excel_exceljs = function() {

		var workbook;
		var worksheet;
		var worksheet_name;
		var filename;
		var incident_label_fields;
		var incidents;
		var font_rows;
		var font_header;
		var fill_header;
		var countsArray;
		var countsArrayValues;

		worksheet_name = 'Sheet1';
		filename = 'incidents_exceljs.xlsx';
		incident_label_fields = c.incident_label_fields;
		incidents = c.incidents;
		
		workbook = new ExcelJS.Workbook();
		worksheet = workbook.addWorksheet(worksheet_name);
		
		worksheet.addRow(incident_label_fields);

		font_rows = {
			family: 2,
			size: 12,
		}
		font_header = {
			family: 2,
			size: 12,
			bold: true
		};
		fill_header = {
			type: 'pattern',
			pattern:'solid',
			fgColor:{argb:'FC1C1C1'},
		};

		countsArray = incidents.reduce(function(counts, incident) {

			Object.keys(incident).forEach(function(property) {

			  var length = String(incident[property]).length;

			  counts[property] = Math.max(counts[property] || 0, length);
			});

			return counts;
		  }, {});
		  
		countsArrayValues = Object.values(countsArray);
		
		incident_label_fields.forEach(function(label, index) {

			var new_index = index + 1;
			var cell = String.fromCharCode(64 + new_index) + 1;			

			var column_selected = worksheet.getColumn(new_index);
			column_selected.width = countsArrayValues[index] >= label.length ? (countsArrayValues[index] + 2) : (label.length + 2);
			column_selected.font = font_rows;

			worksheet.getCell(cell).font = font_header;
			worksheet.getCell(cell).fill = fill_header;
		});
		
		incidents.forEach(function(incident) {
			worksheet.addRow(
				[
					incident.number, 
					incident.opened_at, 
					incident.short_description,
					incident.caller_name,
					incident.priority,
					incident.state,
					incident.category,
					incident.assignment_group,
					incident.assigned_to_name,
					incident.sys_updated_on,
				]
			);
		});		

		workbook.xlsx.writeBuffer().then(function(buffer) {

			var blob = new Blob([buffer], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
			var url = URL.createObjectURL(blob);
			var link = document.createElement('a');
			
			link.href = url;
			link.download = filename;
			link.click();
		});
	}
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.page-title {&#13;
	border-bottom: 1px solid #000;&#13;
	padding-bottom: 5px;&#13;
  	font-weight: 600;&#13;
  	font-family: Roboto;&#13;
}&#13;
&#13;
.margin-bottom-24 {&#13;
	margin-bottom: 24px;&#13;
}&#13;
&#13;
.text-align-center {&#13;
	text-align: center;&#13;
}&#13;
&#13;
@media print { &#13;
&#13;
	table thead tr th {&#13;
		background-color: #C1C1C1 !important; &#13;
	}&#13;
&#13;
	.no-printable { &#13;
		display: none;&#13;
	}&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>incident_reports</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Incident Reports</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	
	var table_name = 'incident';
	
	data.attachment_url = '';
	data.error_message = '';
	data.attachment_sys_id = '';	
	data.incident_label_fields = [];
	data.incidents = [];
	data.instance_name = '';
	
	data.instance_name = gs.getProperty('instance_name');
	data.incident_label_fields = get_incident_label_fields();
	data.incidents = get_incidents();

	if (input && input.action == 'generate_pdf') {
	
		var pdf_data_json;
		var pdf_data_string;

		pdf_data_json = {
			title: 'Incident by PDF Generation API',
			incident_labels: data.incident_label_fields,
			incidents: JSON.parse(data.incidents)
		};

		pdf_data_string = JSON.stringify(pdf_data_json);
		
		generate_report_pdf(pdf_data_string);
	}
	
	if (input && input.action == 'generate_csv') {
		
		var csv_data_json;
		var csv_data_string;

		var csv_data_json = {
			tableTarget: 'x_821667_my_widget_csv_temp',
			columns: data.incident_label_fields,
			rows: JSON.parse(data.incidents)
		};

		csv_data_string = JSON.stringify(csv_data_json);
		
		generate_csv(csv_data_string);
	}
	
	/**
	 * Generates and returns the url of the PDF file, or an error message if the PDF file is not generated.
	 * @param {String} pdf_data - PDF report data.
	 * @return {String} URL of the PDF file or error message.
	 */
	function generate_report_pdf(pdf_data) {

		var response_generate_pdf = '';
		var is_url_response_generate_pdf = '';
		
		var generate_pdf = new x_821667_my_widget.GeneratePDFIncidentReport();
		
		response_generate_pdf = generate_pdf.generate(pdf_data);
		is_url_response_generate_pdf = response_generate_pdf.startsWith('http');
		
		if (response_generate_pdf && is_url_response_generate_pdf)
			data.attachment_url = response_generate_pdf;
		else
			data.error_message = response_generate_pdf;
	}
	
	function generate_csv(csv_data_string) {
		
		var response_generate_csv = '';
		var is_url_response_generate_csv = '';
		
		var generate_csv = new GenerationFactoryCSV();
		
		response_generate_csv = generate_csv.generate(csv_data_string);
		is_url_response_generate_csv = response_generate_csv.startsWith('http');
		
		if (response_generate_csv && is_url_response_generate_csv)
			data.attachment_url = response_generate_csv;
		else
			data.error_message = response_generate_csv;
	}
	
	function get_incident_label_fields() {

		var incident_label_names = [];
		
		var glide_record_incidents = new GlideRecord(table_name);

		glide_record_incidents.setLimit(1);
		glide_record_incidents.query();

		if (glide_record_incidents.next()) {

			incident_label_names.push(glide_record_incidents.number.getLabel());
			incident_label_names.push(glide_record_incidents.opened_at.getLabel());
			incident_label_names.push(glide_record_incidents.short_description.getLabel());
			incident_label_names.push(glide_record_incidents.caller_id.getLabel());
			incident_label_names.push(glide_record_incidents.priority.getLabel());
			incident_label_names.push(glide_record_incidents.state.getLabel());
			incident_label_names.push(glide_record_incidents.category.getLabel());
			incident_label_names.push(glide_record_incidents.assignment_group.getLabel());
			incident_label_names.push(glide_record_incidents.assigned_to.getLabel());
			incident_label_names.push(glide_record_incidents.sys_updated_on.getLabel());
		}
		
		return incident_label_names;
	}
	
	function get_incidents() {
		
		var incidents;
		var incidents_string;

		incidents = [];
		incidents_string = '';
		
		var glide_record_incidents = new GlideRecord(table_name);

    	glide_record_incidents.orderByDesc('sys_updated_on');
		glide_record_incidents.query();

		while (glide_record_incidents.next()) {
			
			var incident = {
				number: glide_record_incidents.number.toString(),
				opened_at: glide_record_incidents.opened_at.toString(),
				short_description: glide_record_incidents.short_description.toString(),
				caller_name: glide_record_incidents.caller_id.first_name.toString() + ' ' + glide_record_incidents.caller_id.last_name.toString(),
				priority: glide_record_incidents.priority.getDisplayValue().toString(),
				state: glide_record_incidents.state.getDisplayValue().toString(),
				category: glide_record_incidents.category.getDisplayValue().toString(),
				assignment_group: glide_record_incidents.assignment_group.name.toString(),
				assigned_to_name: glide_record_incidents.assigned_to.first_name.toString() + ' ' + glide_record_incidents.assigned_to.last_name.toString(),
				sys_updated_on: glide_record_incidents.sys_updated_on.toString()
			};
						
			incidents.push(incident);
			
			incident = {};
		}
		
		incidents_string = JSON.stringify(incidents);

		return incidents_string;
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-04 21:13:38</sys_created_on>
        <sys_id>6b56277a971521109fd237971153afd6</sys_id>
        <sys_mod_count>587</sys_mod_count>
        <sys_name>Incident Reports</sys_name>
        <sys_package display_value="My Widgets" source="x_821667_my_widget">3d3b07fe971121109fd237971153affc</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Widgets">3d3b07fe971121109fd237971153affc</sys_scope>
        <sys_update_name>sp_widget_6b56277a971521109fd237971153afd6</sys_update_name>
        <sys_updated_by>leandro.lopes</sys_updated_by>
        <sys_updated_on>2024-10-30 19:53:41</sys_updated_on>
        <template><![CDATA[<div id="report">
  
  <h4 class="page-title no-printable">{{ ::c.title }}</h4> <br />
	
 	<div class="container-fluid no-printable">
    <div class="row margin-bottom-24 text-align-center">
      <div class="col-md-2">
      	<label>
        	<strong>${Server (Custom)}</strong>
        </label>
    	</div>
      <div class="col-md-2">
        <label>
        	<strong>${Client (Custom)}</strong>
        </label>
    	</div>
      <div class="col-md-2">
        <label>
        	<strong>${Client (OOB)}</strong>
        </label>
      </div>
      <div class="col-md-2">
        <label>
        	<strong>${Client (SheetJS, No Styling)}</strong>
        </label>
    	</div>
      <div class="col-md-2">
        <label>
        	<strong>${Client (ExcelJS, Custom)}</strong>
        </label>
    	</div>
      <div class="col-md-2">
        <label>
        	<strong>${Client (ExcelJS, Custom, Generate User Data)}</strong>
        </label>
    	</div>
    </div>
    <div class="row margin-bottom-24 text-align-center">
      <div class="col-md-2">
      	<button 
                type="button" 
                name="button-generate-pdf" 
                class="button-generate-pdf" 
                ng-click="c.generate_pdf_script_include()"
        >
          ${Generate PDF via Script Include}
        </button>
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-pdf" 
                class="button-generate-pdf" 
                ng-click="c.generate_pdf_vanilla_javascript()"
        >
          ${Generate PDF via Vanilla JavaScript}
        </button>        
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-pdf" 
                class="button-generate-pdf" 
                ng-click="c.generate_pdf_url()"
        >
          ${Generate PDF via URL}
        </button>
    	</div>
      <div class="col-md-2">       
    	</div>
      <div class="col-md-2">
    	</div>
      <div class="col-md-2">
    	</div>
    </div>
    <div class="row margin-bottom-24 text-align-center">
      <div class="col-md-2">        
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-excel" 
                class="button-generate-excel" 
                ng-click="c.generate_excel_vanilla_javascript()"
                >
          ${Generate Excel (only .xls) via Vanilla JavaScript}
        </button>
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-excel" 
                class="button-generate-excel" 
                ng-click="c.generate_excel_url()"
                >
          ${Generate Excel (.xls ou .xlsx) via URL}
        </button>
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-excel" 
                class="button-generate-excel" 
                ng-click="c.generate_excel_sheetjs()"
                >
          ${Generate Excel}
        </button>        
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-excel" 
                class="button-generate-excel" 
                ng-click="c.generate_excel_exceljs()"
                >
          ${Generate Excel}
        </button>
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-excel_user_data" 
                class="button-generate-excel" 
                ng-click="c.generate_excel_exceljs_user_data()"
                >
          ${Generate Excel}
        </button>
    	</div>
    </div>
    <div class="row margin-bottom-24 text-align-center">
      <div class="col-md-2">
      	<button 
                type="button" 
                name="button-generate-csv" 
                class="button-generate-csv" 
                ng-click="c.generate_csv_script_include()"
        >
          ${Generate CSV via Script Include}
        </button>
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-csv" 
                class="button-generate-csv" 
                ng-click="c.generate_csv_vanilla_javascript()"
                >
          ${Generate CSV via Vanilla JavaScript}
        </button>
    	</div>
      <div class="col-md-2">
        <button 
                type="button" 
                name="button-generate-csv" 
                class="button-generate-csv" 
                ng-click="c.generate_csv_url()"
                >
          ${Generate CSV via URL}
        </button>
    	</div>
      <div class="col-md-2">        
    	</div>
      <div class="col-md-2">
    	</div>
      <div class="col-md-2">
    	</div>
    </div>    
  </div>
  
  <div>
    <table 
      id="table-data-report" 
      width="100%"
      style="
        font-family: sans-serif;
        border: 2px solid #000; 
        border-spacing: 0px; 
        border-collapse: collapse;"  
    >
      <thead>
        <tr>
          <td colspan="3" rowspan="7">
            <img src="https://dev118034.service-now.com/logo_sn.png" alt="Image" width="128" height="128">
          </td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
        </tr>
      	<tr>
          <td colspan="2">
            <strong>${Incident Report}</strong>
          </td>
          <td></td>
          <td></td>
          <td></td>          
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td colspan="2">
            <strong>Issue:</strong> {{ c.issue_date }} {{ c.issue_hour }}
          </td>
          <td></td>          
          <td></td>
          <td></td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td></td>
          <td></td>          
          <td></td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
        </tr>
        <tr>
          <th 
            style="
              padding: 10px 6px; 
              text-align: center; 
              font-weight: 600;
              background-color: #C1C1C1;
              border: 2px solid #000; 
              border-spacing: 0px;"
            ng-repeat="label in c.incident_label_fields">
            {{ label }}
          </th>
        </tr>
      </thead>
      <tbody> 
        <tr ng-repeat="incident in c.incidents">
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.number }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.opened_at }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.short_description }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.caller_name }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.priority }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.state }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.category }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.assignment_group }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.assigned_to_name }}</td>
          <td style="padding: 10px 6px; text-align: center; border: 2px solid #000; border-spacing: 0px;">{{ incident.sys_updated_on }}</td>
        </tr>
      </tbody>
    </table>
  </div>
  
</div>]]></template>
    </sp_widget>
</record_update>
